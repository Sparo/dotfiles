set nocompatible        "Be iMproved;
scriptencoding utf-8    "Set scriptencoding to utf-8 (listchars)

" ================ Vundle ====================
filetype off
set rtp+=~/.vim/bundle/Vundle.vim/
call vundle#rc()
Plugin 'gmarik/Vundle.vim'

" Gui plugins
Plugin 'scrooloose/nerdtree'
Plugin 'mhinz/vim-startify'
Plugin 'kien/ctrlp.vim'
Plugin 'd11wtq/ctrlp_bdelete.vim'
Plugin 'bling/vim-airline'
Plugin 'vim-signature'

" Search and movement
Plugin 'mileszs/ack.vim'

" Git and command line
Plugin 'tpope/vim-fugitive'
Plugin 'airblade/vim-gitgutter'
Plugin 'thinca/vim-quickrun'

" Autocomplete and sinppets
Plugin 'Shougo/neocomplete'
Plugin 'Shougo/neosnippet'
Plugin 'Shougo/neosnippet-snippets'
Plugin 'heavenshell/vim-jsdoc'

" Code edit
Plugin 'mattn/emmet-vim'
Plugin 'jiangmiao/auto-pairs'
Plugin 'scrooloose/syntastic'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-commentary'

" Markdown
Plugin 'junegunn/goyo.vim'
Plugin 'suan/vim-instant-markdown'
Plugin 'junegunn/limelight.vim'

" Syntax highlight
Plugin 'jelera/vim-javascript-syntax'
Plugin 'cakebaker/scss-syntax.vim'
Plugin 'digitaltoad/vim-jade'
Plugin 'Glench/Vim-Jinja2-Syntax'

" Share code (gist)
Plugin 'mattn/webapi-vim'
Plugin 'mattn/gist-vim'

" Color schemes
Plugin 'altercation/vim-colors-solarized'
Plugin 'w0ng/vim-hybrid'
Plugin 'whatyouhide/vim-gotham'
Plugin 'chriskempson/base16-vim'

filetype plugin indent on

" =============== Color Schemes ====================
set t_Co=256
set background=dark
highlight clear SignColumn
colorscheme gotham
" let g:hybrid_use_iTerm_colors = 1

" ================ GUI options ====================
set guioptions-=m                           "remove menu bar
set guioptions-=T                           "remove toolbar
set guioptions-=L                           "remove left scrollbar when vertical split
set guioptions-=l                           "remove left scrollbar
set guioptions-=r                           "remove right scrollbar
set linespace=10                            "Set lineheight in gvim
set guifont=Monaco:h13                      "Set font-size in gvim

" ================ General Config ====================
set mouse=a                     "Enable mouse
set title                       "change the terminal's title
set relativenumber              "Line numbers are good
set number
set backspace=indent,eol,start  "Allow backspace in insert mode
set history=500                 "Store lots of :cmdline history
set showcmd                     "Show incomplete cmds down the bottom
set gdefault                    "Set global flag for search and replace
set noerrorbells                "No error bells
set cursorline                  "Highlight current line
set visualbell                  "No sounds
set wrap                        "Enable word wrap
set autoread                    "Reload files changed outside vim
set smartcase                   "Smart case search if there is uppercase
set ignorecase                  "case insensitive search
set binary                      "don't add new line on end of file
set hlsearch                    "Highlight search term
set incsearch                   "Jump to found term while searching
set showmatch                   "Highlight matching bracket
set clipboard+=unnamed          "Copy to system clibpoard
syntax on                       "Turn on syntax highlighting
set laststatus=2                "Show statusbar
set fileencoding=utf-8          "Set utf-8 encoding on write
set encoding=utf-8              "Set utf-8 encoding on read
set hidden                      "Switch buffers when they are not saved

" ================ Indentation ======================
set smarttab
set shiftwidth=4
set softtabstop=4
set tabstop=4
set expandtab
set smartindent
set autoindent
" ================ Completion =======================

set wildmode=list:full
set wildmenu
set wildignore=*.o,*.obj,*~
set wildignore+=*vim/backups*
set wildignore+=*sass-cache*
set wildignore+=*vendor/**
set wildignore+=*node_modules/**
set wildignore+=*DS_Store*
set wildignore+=*.gem
set wildignore+=log/**
set wildignore+=tmp/**
set wildignore+=*.png,*.jpg,*.gif

" ================ Turn Off Swap Files ==============

set noswapfile
set nobackup
set nowb

" ================ Functions ================

" Remove trailing spaces on save
function! StripTrailingWhitespaces()
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    call cursor(l, c)
endfunction

function! SetFileType()
    let name = input("Filetype: ")
    if (name != "")
        exec "set filetype=" . name
    endif
endfunction

function! ExtractLocalVariable()
    let name = input("Variable name: ")

    if (visualmode() == "")
        normal! viw
    else
        normal! gv
    endif

    exec "normal! c" . name
    exec "normal! Ovar " . name . " = "
    exec "normal! pa;"
endfunction

" ================ Auto commands ======================

" Auto-remove trailing spaces
" autocmd BufWritePre * :call StripTrailingWhitespaces()"

" Prefer markdown insted of modula
autocmd BufNewFile,BufReadPost *.md set filetype=markdown

" Show nunjucks as jinja
autocmd BufNewFile,BufReadPost *.nunj set filetype=jinja

" Close nerdtree if it is last buffer
autocmd BufEnter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

" Startify NERDTree Sync
autocmd FileType startify setlocal buftype=
autocmd VimEnter * if !argc() | Startify | execute "normal \<c-w>w" | endif

" Remove unused markers for snippets
autocmd InsertLeave * NeoSnippetClearMarkers

" Goyo and Limelight
autocmd! User GoyoEnter Limelight
autocmd! User GoyoLeave Limelight!

" ================ Key mapping ========================

" Map leader
let mapleader = "\<Space>"

" Easy command mode
nnoremap ; :
vnoremap ; :

" Easier window navigation
nmap <C-h> <C-w>h
nmap <C-j> <C-w>j
nmap <C-k> <C-w>k
nmap <C-l> <C-w>l

" Switch window quickly
map <Leader><Tab> <C-w>w

" Down is really the next line
nnoremap j gj
nnoremap k gk

" Delete content of the file
nnoremap <Leader>d ggdG

" Add empty line and stay in command mode
nmap <Leader>j o<Esc>
nmap <Leader>k O<Esc>

" Fast exit to normal mode
inoremap jj <Esc>
inoremap jk <Esc>

" Book mode
nnoremap <Leader>b magg:vsplit<CR>:set noscrollbind<CR><C-w>l<C-f>:set scrollbind<CR><C-w>h:set scrollbind<CR>`a

" Substitute
nnoremap <Leader>sr :%s///g<left><left>

" Fast save
nnoremap <Leader>w :w<CR>

" Fast quit
nnoremap <Leader>q :q<CR>

" Shorthand for making window smaller and bigger
nnoremap <Leader>, <C-w>20<
nnoremap <Leader>. <C-w>20>

" Copy and paste
vnoremap <Leader>y "+y"
nnoremap <Leader><Space>p <Esc>"+p

" Hide highlight
nnoremap <silent> <BS> :noh<CR>

" Indenting in visual and normal mode
xnoremap <s-tab> <gv
xnoremap <tab> >gv
nnoremap <tab> >>
nnoremap <s-tab> <<

" Run npm test
nnoremap <Leader>t :!npm test<CR>

" Set FileType
nnoremap <Leader>/ :call SetFileType()<CR>

" Clear trailing whitespaces
nnoremap <Leader>i :call StripTrailingWhitespaces()<CR>

" Extract variable
vnoremap <Leader>var :call ExtractLocalVariable()<CR>

" ================ Plugins setups ========================

" Startify
let g:startify_custom_header = [
\ '       ____                _                    _    _ ',
\ '      / ___| ___  ___  ___| |__   _____   _____| | _(_)',
\ '     | |  _ / _ \/ __|/ __|  _ \ / _ \ \ / / __| |/ / |',
\ '     | |_| | (_) \__ \ (__| | | |  __/\ V /\__ \   <| |',
\ '      \____|\___/|___/\___|_| |_|\___| \_/ |___/_|\_\_|',
\ '',
\ ''
\ ]
let g:startify_relative_path = 1
let g:startify_list_order = [['    Recently modified files in the current directory:'], 'dir']

" NERDTree
map <Leader>s :NERDTreeToggle<CR>
let NERDTreeIgnore=['\.git$', '\.sass-cache$', '_site$']
let g:NERDTreeChDirMode=2
let NERDTreeShowHidden=1

" CtrlP
let g:ctrlp_reuse_window  = 'startify'
call ctrlp_bdelete#init()
nnoremap <Leader>p :CtrlP<CR>
nnoremap <Leader>o :CtrlPBuffer<CR>

" Fugitive commands
nnoremap <Leader>gs :Gstatus<CR>
nnoremap <Leader>gd :Gdiff<CR>
nnoremap <Leader>gb :Gblame<CR>
nnoremap <Leader>gc :Gcommit<CR>

" Syntastic
let g:syntastic_javascript_checkers = ['jshint', 'jscs']
let g:syntastic_always_populate_loc_list=1
let g:syntastic_aggregate_errors = 1
let g:syntastic_error_symbol='X'
let g:syntastic_warning_symbol='!'
let g:syntastic_style_error_symbol='X'
let g:syntastic_style_warning_symbol='!'
let g:syntastic_html_tidy_ignore_errors = [
    \  'plain text isn''t allowed in <head> elements',
    \  '<base> escaping malformed URI reference',
    \  'discarding unexpected <body>',
    \  '<script> escaping malformed URI reference',
    \  '</head> isn''t allowed in <body> elements'
    \ ]
nnoremap <Leader>c :SyntasticCheck<CR>
nnoremap <Leader>x :SyntasticReset<CR>

" Commentary
nmap <Leader>\ gcc

" Ack Search
let g:ackhighlight = 1
nnoremap <Leader>f :Ack<Space>

" Emmet
let g:user_emmet_expandabbr_key = '<C-e>'           "Change trigger emmet key
let g:user_emmet_next_key = '<C-n>'                 "Change trigger jump to next for emmet

" GitGutter
let g:gitgutter_realtime = 0                        "Disable gitgutter in realtime
let g:gitgutter_eager = 0                           "Disable gitgutter to eager load on tab or buffer switch

" NeoSnippet
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_smart_case = 1
let g:neosnippet#snippets_directory = '~/dotfiles/snippets'
imap <expr><TAB> neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "\<C-n>" : "\<TAB>"
imap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<S-Tab>"
smap <expr><TAB> neosnippet#jumpable() ? "\<Plug>(neosnippet_jump)" : "\<TAB>"

" Gist
let g:gist_detect_filetype = 1
let g:gist_post_private = 1
let g:gist_clip_command = 'pbcopy'
xnoremap <Leader>gist :Gist -a<CR>
nnoremap <Leader>gist :Gist -a<CR>
nnoremap <Leader>agist :Gist -a -m<CR>

" Airline
let g:airline_theme = "gotham"
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_mode_map = { '__':'-', 'n':'N', 'i':'I', 'R':'R', 'c':'C', 'v':'V', 'V':'V', '':'V', 's':'S', 'S':'S', '':'S' }
let g:airline#extensions#hunks#enabled=0
let g:airline_section_y = '%{&enc}'
let g:airline_section_z = '%p%%'
let g:airline_exclude_preview = 1
