" ================================================
" Vundle
" ================================================
set nocompatible
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'

" Other
Plugin 'itchyny/calendar.vim'
Plugin 'itchyny/screensaver.vim'

" Gui plugins
Plugin 'scrooloose/nerdtree'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'bling/vim-airline'

" Search and movement
Plugin 'mileszs/ack.vim'

" Git and command line
Plugin 'tpope/vim-fugitive'
Plugin 'airblade/vim-gitgutter'

" Autocomplete and sinppets
Plugin 'Shougo/neocomplete'
Plugin 'Shougo/neosnippet'
Plugin 'Shougo/neosnippet-snippets'

" Code edit
Plugin 'mattn/emmet-vim'
Plugin 'jiangmiao/auto-pairs'
Plugin 'scrooloose/syntastic'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-commentary'

" Code highlight
Plugin 'pangloss/vim-javascript'
Plugin 'Glench/Vim-Jinja2-Syntax'

" Markdown
Plugin 'junegunn/goyo.vim'
Plugin 'junegunn/limelight.vim'

" Share code (gist)
Plugin 'mattn/webapi-vim'
Plugin 'mattn/gist-vim'

" Color schemes
Plugin 'whatyouhide/vim-gotham'

call vundle#end()
filetype plugin indent on

" ================================================
" Color scheme
" ================================================
set t_Co=256
set background=dark
colorscheme gotham

" ================================================
" General config
" ================================================
set mouse=a                     "Enable mouse
set title                       "change the terminal's title
set relativenumber              "Line numbers are good
set number
set backspace=indent,eol,start  "Allow backspace in insert mode
set history=500                 "Store lots of :cmdline history
set showcmd                     "Show incomplete cmds down the bottom
set gdefault                    "Set global flag for search and replace
set noerrorbells                "No error bells
set cursorline                  "Highlight current line
set cursorline cursorcolumn     "Highlight column (vertical line)
set visualbell                  "No sounds
set wrap                        "Enable word wrap
set autoread                    "Reload files changed outside vim
set smartcase                   "Smart case search if there is uppercase
set ignorecase                  "case insensitive search
set binary                      "don't add new line on end of file
set hlsearch                    "Highlight search term
set incsearch                   "Jump to found term while searching
set showmatch                   "Highlight matching bracket
set clipboard+=unnamed          "Copy to system clibpoard
syntax on                       "Turn on syntax highlighting
set laststatus=2                "Show statusbar
set fileencoding=utf-8          "Set utf-8 encoding on write
set encoding=utf-8              "Set utf-8 encoding on read
set hidden                      "Switch buffers when they are not saved"

" ================================================
" Indentation
" ================================================
set smarttab
set shiftwidth=4
set softtabstop=4
set tabstop=4
set expandtab
set smartindent
set autoindent


" ================================================
" Completion
" ================================================
set wildmode=list:full
set wildmenu
set wildignore=*.o,*.obj,*~
set wildignore+=*vim/backups*
set wildignore+=*sass-cache*
set wildignore+=*vendor/**
set wildignore+=*node_modules/**
set wildignore+=*DS_Store*
set wildignore+=*.gem
set wildignore+=log/**
set wildignore+=tmp/**
set wildignore+=*.png,*.jpg,*.gif

" ================================================
" Swap files
" ================================================
set noswapfile
set nobackup
set nowb

" ================================================
" Functions
" ================================================
function! StripTrailingWhitespaces()
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    call cursor(l, c)
endfunction

function! SetFileType()
    let name = input("Filetype: ")
    if (name != "")
        exec "set filetype=" . name
    endif
endfunction

" ================================================
" Auto-Commands
" ================================================
" Prefer markdown insted of modula
autocmd BufNewFile,BufReadPost *.md set filetype=markdown
" Show nunjucks as jinja
autocmd BufNewFile,BufReadPost *.nunj set filetype=jinja
" Goyo and Limelight sync
autocmd! User GoyoEnter Limelight
autocmd! User GoyoLeave Limelight!

" ================================================
" Key mappings (bindings)
" ================================================
" Map leader
let mapleader = "\<Space>"

" Disable Ex mode
noremap Q <NOP>

" Easy command mode
nnoremap ; :
vnoremap ; :

" Easier window navigation
nmap <C-h> <C-w>h
nmap <C-j> <C-w>j
nmap <C-k> <C-w>k
nmap <C-l> <C-w>l

" Switch window quickly
map <Leader><Tab> <C-w>w

" Down is really the next line
nnoremap j gj
nnoremap k gk

" Delete content of the file
nnoremap <Leader>d ggdG

" Add empty line and stay in command mode
nmap <Leader>j o<Esc>
nmap <Leader>k O<Esc>

" Fast exit to normal mode
inoremap jj <Esc>
inoremap jk <Esc>

" Substitute
nnoremap <Leader>sr :%s///g<left><left>

" Fast save
nnoremap <Leader>w :w<CR>

" Fast quit
nnoremap <Leader>q :q<CR>

" Shorthand for making window smaller and bigger
nnoremap <Leader>, <C-w>20<
nnoremap <Leader>. <C-w>20>

" Hide highlight
nnoremap <silent> <BS> :noh<CR>

" Indenting in visual and normal mode
xnoremap <s-tab> <gv
xnoremap <tab> >gv
nnoremap <tab> >>
nnoremap <s-tab> <<

" Set FileType
nnoremap <Leader>/ :call SetFileType()<CR>

" Clear trailing whitespaces
nnoremap <Leader>i :call StripTrailingWhitespaces()<CR>

" ================================================
" Plugin settings and mappings (bindings)
" ================================================
" NERDTree
map <Leader>r :NERDTreeToggle<CR>
let NERDTreeShowHidden=1

" CtrlP
let g:ctrlp_reuse_window  = 'startify'
nnoremap <Leader>p :CtrlP<CR>
nnoremap <Leader>o :CtrlPBuffer<CR>

" Airline
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline#extensions#hunks#enabled=0
let g:airline_section_y = '%{&enc}'
let g:airline_section_z = '%p%%'

" Ack Search
nnoremap <Leader>f :Ack<Space>

" Fugitive commands
nnoremap <Leader>gs :Gstatus<CR>
nnoremap <Leader>gd :Gdiff<CR>
nnoremap <Leader>gb :Gblame<CR>
nnoremap <Leader>gc :Gcommit<CR>
nnoremap <Leader>gr :Gread<CR>:w<CR>

" GitGutter
let g:gitgutter_realtime = 0

" Neocomplete
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_smart_case = 1

" Neosnippet
let g:neosnippet#snippets_directory = '~/dotfiles/snippets'
imap <expr><TAB> neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "\<C-n>" : "\<TAB>"
imap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<S-Tab>"
smap <expr><TAB> neosnippet#jumpable() ? "\<Plug>(neosnippet_jump)" : "\<TAB>"

" Emmet
let g:user_emmet_expandabbr_key = '<C-e>'

" Syntastic
let g:syntastic_javascript_checkers = ['jshint', 'jscs']
let g:syntastic_aggregate_errors = 1
let g:syntastic_always_populate_loc_list = 1
nnoremap <Leader>c :lwindow<CR>
nnoremap <Leader>x :lclose<CR>

" Gist
let g:gist_detect_filetype = 1
let g:gist_post_private = 1
let g:gist_clip_command = 'pbcopy'
xnoremap <Leader>gist :Gist<CR>
nnoremap <Leader>gist :Gist<CR>

" Calendar
let g:calendar_google_calendar = 1
