call plug#begin('~/.vim/plugged')

" Files buffers navigation
Plug 'scrooloose/nerdtree'
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'

" Search and movement
Plug 'mileszs/ack.vim'
Plug 'embear/vim-foldsearch'
Plug 'yuttie/comfortable-motion.vim'
Plug 'brooth/far.vim'

" Git and command line
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-dispatch'
Plug 'airblade/vim-gitgutter'
Plug 'mtth/scratch.vim'
Plug 'metakirby5/codi.vim'
Plug 'sunaku/vim-dasht'

" Snippets and autocomplete
Plug 'Shougo/neocomplete.vim'
Plug 'Shougo/neocomplete'
Plug 'Shougo/neosnippet'
Plug 'mattn/emmet-vim'

" Code edit
Plug 'vim-syntastic/syntastic'
Plug 'jiangmiao/auto-pairs'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-commentary'

" Code highlight
Plug 'sheerun/vim-polyglot'
Plug 'Glench/Vim-Jinja2-Syntax'

" Markdown
Plug 'junegunn/goyo.vim'
Plug 'junegunn/limelight.vim'

" Color schemes
Plug 'chriskempson/base16-vim'

" Add plugins to &runtimepath
call plug#end()

" ================================================
" Color scheme
" ================================================
let base16colorspace=256
set background=dark
execute "colorscheme base16-".$THEME

" ================================================
" General config
" ================================================
set relativenumber              "Line numbers are good
set number                      "Line numbers are good
set binary                      "don't add new line on end of file (git)
set gdefault                    "Set global flag for search and replace
set cursorline cursorcolumn     "Highlight column (vertical line)
set autoread                    "Reload files changed outside vim
set smartcase                   "Smart case search if there is uppercase
set ignorecase                  "case insensitive search
set hlsearch                    "highlight search results
set incsearch                   "show matches in real time
set clipboard+=unnamed          "use system clipboard
set fileencoding=utf-8          "Set utf-8 encoding on write
set laststatus=0
set ruler                       "Show line/column number
set hidden                      "Switch buffers when they are not saved"
set belloff=all                 "turn off bells
set mouse=a                     "enable mouse
set lazyredraw                  "lazy redraw for macors
syntax on                       "Turn on syntax highlighting

" ================================================
" Cursor style in tmux
" ================================================
let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
let &t_SR = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=2\x7\<Esc>\\"
let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"

" ================================================
" Indentation
" ================================================
set smarttab
set shiftwidth=4
set softtabstop=4
set tabstop=4
set expandtab
set smartindent
set autoindent

" ================================================
" Completion
" ================================================
set wildmode=list:full
set wildmenu
set wildignore=*.o,*.obj,*~
set wildignore+=*vim/backups*
set wildignore+=*sass-cache*
set wildignore+=*vendor/**
set wildignore+=*node_modules/**
set wildignore+=*DS_Store*
set wildignore+=*.gem
set wildignore+=log/**
set wildignore+=tmp/**
set wildignore+=*.png,*.jpg,*.gif

" ================================================
" Swap files
" ================================================
set noswapfile
set nobackup
set nowb

" ================================================
" Functions
" ================================================
function! FixFile()
    let l = line(".")
    let c = col(".")
    " Delete trailing slashes
    %s/\s\+$//e
    " Replace tabs with spaces
    %s/\t/    /e
    " Fix indentation
    exec "normal! gg=G"
    call cursor(l, c)
endfunction

function! NERDTreeToggleInCurDir()
    " If NERDTree is open in the current buffer
    if (exists("t:NERDTreeBufName") && bufwinnr(t:NERDTreeBufName) != -1)
        exe ":NERDTreeClose"
    else
        if (expand("%:t") != '')
            exe ":NERDTreeFind"
        else
            exe ":NERDTreeToggle"
        endif
    endif
endfunction

" ================================================
" Auto-Commands
" ================================================
" Show nunjucks as jinja
autocmd BufNewFile,BufReadPost *.nunj set filetype=jinja
autocmd BufNewFile,BufReadPost *.njk set filetype=jinja
" Goyo and Limelight sync
autocmd! User GoyoEnter Limelight
autocmd! User GoyoLeave Limelight!

" ================================================
" Key mappings (bindings)
" ================================================
" Map leader
let mapleader = "\<Space>"

" Reload vim config
nnoremap <Leader><Leader>r :source ~/.vimrc<CR>

" Notes
nnoremap <Leader>n :e ~/Google\ Drive/Notes/

" Disable Ex mode
noremap Q <NOP>

" Copy file path
nnoremap <Leader>y :let @* = expand("%")<CR>

" Copy to the end of the line
nnoremap Y y$

" Fast navigation
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

" Quickfix and location lists
map <Leader>co :copen<CR>
map <Leader>cc :cclose<CR>
map <Leader>cn :cn<CR>
map <Leader>cp :cp<CR>
map <Leader>lo :lopen<CR>
map <Leader>lc :lclose<CR>

" Search selected
vnoremap // y/<C-R>"<CR>

" Move selected
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv

" Search under the cursor and back to that instance
nnoremap \ *N

" Easy command mode
nnoremap ; :
vnoremap ; :

" Switch between buffers quickly
map <Leader><Tab> <C-^>

" Down is really the next line
nnoremap j gj
nnoremap k gk

" Delete content of the file
nnoremap <Leader>d ggdG

" Add empty line and stay in command mode
nmap <Leader>j o<Esc>k
nmap <Leader>k O<Esc>j

" Fast exit to normal mode
inoremap jj <Esc>
inoremap jk <Esc>

" Center highlighted search
nnoremap n nzz
nnoremap N Nzz

" Substitute
nnoremap <Leader>sr :Far \V %<left><left>

" Fast save
nnoremap <Leader>w :w<CR>

" Fast quit
nnoremap <Leader>q :q<CR>

" Shorthand for making window smaller and bigger
nnoremap <Leader>, <C-w>20<
nnoremap <Leader>. <C-w>20>

" Hide highlight
nnoremap <silent> <BS> :noh<CR>

" Indenting in visual and normal mode
xnoremap <s-tab> <gv
xnoremap <tab> >gv
nnoremap <tab> >>
nnoremap <s-tab> <<

" Clear trailing whitespaces
nnoremap <Leader>i :call FixFile()<CR>

" ================================================
" Plugin settings and mappings (bindings)
" ================================================

" NERDTree
nnoremap - :call NERDTreeToggleInCurDir()<CR>
let NERDTreeShowHidden=1

" Fzf
let g:fzf_layout = { 'right': '~40%' }
nnoremap <Leader>p :GFiles<CR>
nnoremap <Leader>o :Buffers<CR>
nnoremap <Leader>[ :Files<CR>
nnoremap <Leader>gf :Commits<CR>
nnoremap <Leader>gh :BCommits<CR>
nnoremap <Leader>m :Maps<CR>
nnoremap <Leader>\ :Filetypes<CR>

" Fugitive commands
nnoremap <Leader>gst :Gstatus<CR>
nnoremap <Leader>gss :Dispatch !git stash<CR>
nnoremap <Leader>gsp :Dispatch !git stash pop<CR>
nnoremap <Leader>gpl :Git pull --rebase<CR>
nnoremap <Leader>gps :Gpush<CR>
nnoremap <Leader>gd :Gdiff<CR>
nnoremap <Leader>gb :Gblame<CR>
nnoremap <C-n> :echo fugitive#statusline()<CR>
nnoremap <Leader>gcm :Gcommit<CR>
nnoremap <Leader>gco :Gread<CR>:w<CR>

" Ack Search
nnoremap <Leader>f :Ack -Q ""<Left>
nnoremap <Leader>a :Ack <cword><cr>
let g:ackprg = 'ag --vimgrep'

" Fold searches
let g:foldsearch_disable_mappings=1
nnoremap <Leader>/ :Fs<CR>

" Run Codi
nnoremap , :Codi!!<CR>

" Search with dasht
nnoremap <Leader><Leader>k :Dasht!<Space>
nnoremap <Leader><Leader>K :call Dasht([expand('<cWORD>'), expand('<cword>')], '!')<CR>
vnoremap <Leader><Leader>K y:<C-U>call Dasht(getreg(0), '!')<CR>

" GitGutter
let g:gitgutter_realtime = 0

" Syntastic
let g:syntastic_javascript_checkers = ['eslint']

" Neocomplete
let g:neocomplete#enable_at_startup = 1
 
" Syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 0

" Neosnippet
let g:neosnippet#disable_runtime_snippets = {'_' : 1}
let g:neosnippet#snippets_directory = '~/dotfiles/snippets'
imap <expr><TAB> neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "\<C-n>" : "\<TAB>"
imap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<S-Tab>"
smap <expr><TAB> neosnippet#jumpable() ? "\<Plug>(neosnippet_jump)" : "\<TAB>"
